<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 配置SQL映射
    namespace：名称空间
                1、随便写
                2、Mapper接口开发，按照规定来写

-->
<mapper namespace="com.smart.dao.UserMapper">
    <!--
        <select>:定义查询语句
                id: <select> 的唯一标识
                resultType: 结果集的映射类型
                #{id}: 获取参数值
    -->
    <select id="selectUser" resultType="User">
    select * from user where id = #{id}
  </select>

    <select id="getUserById" resultType="User">
    select username,password,user_age from user where id = #{id}
    </select>

    <!-- public void addUser(User user);
            parameterType:指定参数类型，可以省略不配置
            useGeneratedKeys:告诉Mybatis使用主键自增的方式
            keyProperty：指定用对象的哪个属性保存Mybatis返回的主键值
    -->
    <insert id="addUser" parameterType="com.smart.entity.User"
    useGeneratedKeys="true" keyProperty="id"
    >
        insert into user(username, password, user_age) value(#{username},#{password},#{userAge})
    </insert>

    <!--     public void updateUser(User user);-->
    <update id="updateUser">
        update user set
        username = #{username},
        password = #{password},
        user_age = #{userAge}
        where id = #{id}
    </update>

    <!--    public void deleteUserById(Integer id); -->
    <delete id="deleteUserById">
       delete from user where id = #{id}
    </delete>
    
    <!--    public User getUserByIdAndUsername(Integer id, String username); -->
    <select id="getUserByIdAndUsername" resultType="User">
    select id,username,password,user_age from user where id = #{1}
    </select>

    <!-- public User getUserByMap(Map<String,Object> map); -->
    <select id="getUserByMap" resultType="User">
        select id,username,password,user_age from user where id = #{id} and username = #{username}

    </select>

</mapper>